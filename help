There are three different ways to run this script. They are listed below along
with further arguments each way takes.

Method 1 (help): with python3 rng.py -h
  This command brings up this help menu

Method 2 (query): with python3 rng.py -q --in <filename> [--combine int]
  This method returns the amount of random bytes that can be generated from the
  given input file. 

  --combine: This option allows the user to specify how many subsequent bytes are
    XOR-ed to produce the output. If not used, none are XORed

Method 3 (generate from .wav): with python3 rng.py --in <filename> [-s start]
  [-e end] [--out filename] [--sectets] [--grc]
  [--ascii OR --binary OR --hex OR --digits] [--post-extract <int>]

  In this method, a .wav file must be provided via --in <filename>

  -s <int> sets the byte to start at, of the available random bytes, in the .wav
    file. Run "python3 rng.py -q --in <filename>" as described in Method 2
    to see the number of available bytes. If not set, then defaults to zero.

  -e <int> sets the byte to end at, of the available random bytes, in the .wav
    file. If not set, then defaults to maximum given the filesize.


  --out <filename> sets the file to write randomly generated bytes to. If none
    is provided, they will simply be printed

  --secrets enables secrets mode, in which random bytes generated by Python's
    secrets module are xor-ed with the bytes generated 

  --grc enables the grc mode, in which random bytes from GRC (Gibson Research
    Corporation) are xor-ed with the bytes generated. If this option is chosen,
    only 32 bytes can be generated (i.e. end - start <= 32).

  --ascii random bytes will be displayed in ASCII format (e.g. f~*PHCB'Y7...)

  --binary random bytes will be displayed in binary string format (e.g. 10010110...)
  
  --hex random bytes will be displayed in hexadecimal format (e.g. 5b905c38d...)

  --digits random bytes will be displayed 

  --post-extract <int> randomness extraction via the SHA512 hash algorithm will extract
    randomness from the generated bytes, after they are processed by the regular algorithm.
    The given integer must be greater than 1, and specifies the ratio of input/output
    bytes to the SHA512 hash. For example, --post-extract 2 will feed SHA512 blocks of
    128 bytes for 64 byte outputs; --post-extract 4 will feed SHA512 blocks of 256 bytes
    for 64 byte outputs, etc. Note that the efficieny is reduced with this mode of operation:
    users will only get 1/n of the output where n is the integer specified.

Examples uses:

  python3 rng.py --in noise.wav -s 0 -e 100 --hex
    (prints 100 bytes in hexadecimal form)

  python3 rng.py --in noise.wav --digits --out random_digits.txt
    (writes all random bytes generated from noise.wav to random_digits.txt in the form
    of decimal digits)

  python3 rng.py --in noise.wav -e 128 --hex --post-extract 2
    (prints 64 bytes worth of hexadecimal digits, since the --post-extract option is used
    with argument 2)

