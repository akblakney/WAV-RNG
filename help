How to run this script:

Method 1 (help): with python3 rng.py -h OR python3 rng.py --help
  This command brings up this help menu

Method 2 (query): with python3 rng.py -q --in <filename> OR python3 rng.py --query --in <filename>
  This method returns the amount of 64-byte blocks that can be generated from the
  given input file.  The --block-size argument, described below, can be used with this option.

Method 3 (generate from .wav), with: python3 rng.py --in <filename> [-s start]
  [-e end] [--out filename] [--sectets] [--ascii OR --binary OR --hex OR --digits]
  [--no-hash]

  In this method, a .wav file must be provided via --in <filename>

  -s <int> sets the 64-byte block to start at in the .wav
    file. Run "python3 rng.py -q --in <filename>" as described in Method 2
    to see the number of available 64-byte blocks. If not set, then defaults to zero.

  -e <int> sets the 64-byte block to end at  in the .wav
    file. If not set, then defaults to maximum given the filesize.

  --out <filename> sets the file to write randomly generated bytes to. If none
    is provided, they will simply be printed

  --secrets enables secrets mode, in which random bytes generated by Python's
    secrets module are xor-ed with the bytes generated 

  --ascii random bytes will be displayed in ASCII format (e.g. f~*PHCB'Y7...)

  --binary random bytes will be displayed in binary string format (e.g. 10010110...)
  
  --hex random bytes will be displayed in hexadecimal format (e.g. 5b905c38d...)

  --digits random bytes will be displayed 

  --debug-raw causes even bytes of the wav file, without the SHA-512 post-processing
    step to be output. This is useful for verifying that the even bytes of a .wav
    file have enough entropy to generate random numbers.

  --header-len <int> sets a custom header length for the .wav file. Default value is
    100. Recommended to select integer at least 100 and it should be even, or else
    the odd bytes will be used which is bad..

  --extend <int> is used to seed a PRNG (based on SHA-512) with the entropy from the
    atmospheric noise. The specified integer gives the number of 64-byte blocks to
    output from one chunk of entropy from the .wav file (specified with --block-size,
    with default value of 1024 bytes). 

Examples uses:

  python3 rng.py --in noise.wav -s 0 -e 5 --hex
    (prints 5 * 64 bytes in hexadecimal form)

  python3 rng.py --in noise.wav --digits --out random_digits.txt
    (writes all random bytes generated from noise.wav to random_digits.txt in the form
    of decimal digits)

  python3 rng.py --in noise.wav --header-len 200 --debug-raw
    (sets header length to 200 (instead of default 100) and outputs raw even bytes without
    the SHA-512 post-processing step)


