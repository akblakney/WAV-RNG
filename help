How to run this script:

Method 1 (help): with python3 rng.py -h OR python3 rng.py --help
  This command brings up this help menu

Method 2 (query): with python3 rng.py -q --in <filename> OR python3 rng.py --query --in <filename>
  This method returns the amount of 64-byte blocks that can be generated from the
  given input file.  The --block-size argument, described below, can be used with this option.

Method 3 (generate from .wav), with: python3 rng.py --in <filename> [-s start]
  [-e end] [--out filename] [--sectets] [--ascii OR --binary OR --hex OR --digits]
  [--no-hash] [--blake] [--aes] [--fold]

  In this method, a .wav file must be provided via --in <filename>

  -s <int> sets the 64-byte block to start at in the .wav
    file. Run "python3 rng.py -q --in <filename>" as described in Method 2
    to see the number of available 64-byte blocks. If not set, then defaults to zero.

  -e <int> sets the 64-byte block to end at  in the .wav
    file. If not set, then defaults to maximum given the filesize.

  --out <filename> sets the file to write randomly generated bytes to. If none
    is provided, they will simply be printed

  --secrets enables secrets mode, in which random bytes generated by Python's
    secrets module are xor-ed with the bytes generated 

  --ascii random bytes will be displayed in ASCII format (e.g. f~*PHCB'Y7...)

  --binary random bytes will be displayed in binary string format (e.g. 10010110...)
  
  --hex random bytes will be displayed in hexadecimal format (e.g. 5b905c38d...)

  --digits random bytes will be displayed 

  --no-sha runs the generator without the hashing step. For data with high entropy,
    this may be sufficient for generating random numbers, but is discouraged. The
    main use of this option is to test to see if the data has enough entropy to
    be used with the hashing step.

  --header-len <int> sets a custom header length for the .wav file. Default value is
    100. Recommended to select integer at least 100.

  --blake sets the hashing algorithm to be used to blake2b, instead of the default
    sha512. The --no-hash option overrides this choice and causes the hashing step
    to be skipped.

  --aes after the RNG runs, the first 64-byte block will be used to seed a PRNG
    based on AES in OFB mode. The output of this PRNG will be xor-ed with the output
    of the normal RNG. Note that because the first 64-byte block is used to seed the RNG,
    one less block will be output in this mode. Also note that this option requires
    the Pycrypto Crypto module

Examples uses:

  python3 rng.py --in noise.wav -s 0 -e 5 --hex
    (prints 5 * 64 bytes in hexadecimal form)

  python3 rng.py --in noise.wav --digits --out random_digits.txt
    (writes all random bytes generated from noise.wav to random_digits.txt in the form
    of decimal digits)

  python3 rng.py --in noise.wav --out random_data_file --header-len 200 --no-hash
    (sets header length to 200 (instead of default 100) and outputs raw even bytes without
    the SHA-512 post-processing step)


