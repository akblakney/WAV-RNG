There are three different ways to run this script. They are listed below along
with further arguments each way takes.

Method 1 (help): with python3 rng.py -h
  This command brings up this help menu

Method 2 (query): with python3 rng.py -q --in <filename> [-bpb=]
  This method returns the amount of random bytes that can be generated from the
  given input file. 

  -bpb: This option allows the user to specify the bits per block field, which
    is the number of bits in the .wav file that are used to generate one random
    output bit. See README.md for more information

Method 3 (generate from .wav): with python3 rng.py --in <filename> [-s start]
  [-e end] [-u use_bit] [-bpb]  [--out filename] [-v] [--sectets] [--grc]
  [--ascii OR --binary OR --hex OR --digits]

  In this method, a .wav file must be provided via --in <filename>

  -s <int> sets the byte to start at, of the available random bytes, in the .wav
    file. Run "python3 rng.py -q --in <filename>" as described in Method 2
    to see the number of available bytes. If not set, then defaults to zero.

  -e <int> sets the byte to end at, of the available random bytes, in the .wav
    file. If not set, then defaults to maximum given the filesize.

  -u <int> sets the use_bit field, which determines which bit in the 16-bit blocks
    (or more bits, if set with -bpb) of the .wav file to use when generating
    random bytes. See README.md for more information.

  -bpb sets the bits per block field, i.e. the number of bits in the wav file from
    which one bit is generated. See README.md for more information.

  --out <filename> sets the file to write randomly generated bytes to. If none
    is provided, they will simply be printed

  -v set for verbose output
  
  --secrets enables secrets mode, in which random bytes generated by Python's
    secrets module are xor-ed with the bytes generated 

  --grc enables the grc mode, in which random bytes from GRC (Gibson Research
    Corporation) are xor-ed with the bytes generated. If this option is chosen,
    only 32 bytes can be generated (i.e. end - start <= 32).

  --ascii random bytes will be displayed in ASCII format (e.g. f~*PHCB'Y7...)

  --binary random bytes will be displayed in binary string format (e.g. 10010110...)
  
  --hex random bytes will be displayed in hexadecimal format (e.g. 5b905c38d...)

  --digits random bytes will be displayed 

  --extract randomness extraction via the SHA256 hash algorithm will extract
    randomness from the generated bytes. The efficieny is 50%, so the user
    will get only half of the data they would otherwise get

  
Method 4: In this method, run same as above, except no .wav file is necessary.
  Instead, either --secrets or --grc (or both) must be used as generators,
  and the number of bytes must be given with --num_bytes

  Example: 
    python3 rng.py --secrets num_bytes=100

